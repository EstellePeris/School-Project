# -*- coding: utf-8 -*-
"""data_visualization_lab_colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cehYj1gKqAYkuvLGD4LCwZ6A53llMsrz

## 1. Line Chart
Plot a line chart showing the trend of monthly revenue for a business over a year.
"""

# Sample Data
import pandas as pd

months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
revenue = [12000, 15000, 18000, 17000, 19000, 22000, 25000, 24000, 23000, 26000, 27000, 30000]

df = pd.DataFrame({'Month': months, 'Revenue': revenue})
print(df.head())


# Now, create a line chart using Matplotlib.

import matplotlib.pyplot as plt
plt.plot(months, revenue, marker='o', linestyle='--', color='r')
plt.title("The trend of monthly revenue for a business over a year")
plt.xlabel("Months")
plt.ylabel("Revenue (PLN)")
plt.grid()

plt.show()

"""## 2. Bar Chart
Create a bar chart that compares the number of units sold for different product categories.
"""

import matplotlib.pyplot as plt
import numpy as np

categories = ['shoes', 'bags', 'cloths', 'jewelries','electromics', 'groceries', 'accessorise', 'watches', 'foods', 'alcohol']
colors = ['red', 'blue', 'green', 'orange', 'purple', 'pink', 'brown', 'yellow', 'cyan', 'magenta']
values = np.random.uniform(10, 40, 10)
plt.figure(figsize=(12, 5))
plt.bar(categories, values, color= colors)
plt.title("The number of units sold for different product categories")
plt.xlabel("Categories")
plt.ylabel("Number of units")
plt.show()

"""## 3. Histogram
Generate a histogram to visualize the distribution of customer ages in a store.
"""

# Sample Data
import numpy as np

np.random.seed(42)
ages = np.random.randint(18, 65, 200)

# Use Matplotlib or Seaborn to create the histogram.
plt.hist(ages, bins=30, color= "g")
plt.title("The distribution of customer ages in a store.")
plt.xlabel("Ages")
plt.ylabel("Frequency")
plt.show()

"""## 4. Scatter Plot
Plot a scatter plot to analyze the correlation between marketing spend and sales revenue.
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

# Creating the dataset
np.random.seed(0)
marketing_spend = np.random.randint(10000, 50000, 100)
sales_revenue = marketing_spend * 0.5 + np.random.normal(0, 5000, 100)
df = pd.DataFrame({'Marketing Spend': marketing_spend, 'Sales Revenue': sales_revenue})
plt.figure(figsize=(8,5))
sns.regplot(x='Marketing Spend', y='Sales Revenue', data=df, scatter_kws={'color':'blue', 'alpha':0.6}, line_kws={'color':'red'})
plt.title("The correlation between marketing spend and sales revenue")
plt.xlabel("Marketing spend")
plt.ylabel("Sales Revenue (PLN)")
plt.grid()
plt.show()

"""## 5. Subplots
Create a figure with two subplots: (1) a line chart showing website visitors over months, and (2) a bar chart showing the number of purchases.
"""

# Sample Data
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
visitors = [5000, 7000, 8000, 7500, 8200, 9000]
purchases = [200, 300, 450, 400, 480, 550]

# Create subplots using Matplotlib.

import matplotlib.pyplot as plt
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
visitors = [5000, 7000, 8000, 7500, 8200, 9000]

df = pd.DataFrame({'Month': months, 'Visitor': visitors})

# Now, create a line chart using Matplotlib.

plt.plot(months, visitors, marker='o', linestyle='--', color='r')
plt.title("Website visitors over months")
plt.xlabel("Months")
plt.ylabel("Visitors")
plt.grid()

months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
purchases = [200, 300, 450, 400, 480, 550]
values = np.random.uniform(10, 40, 10)
plt.figure(figsize=(6, 4))
plt.bar(months, purchases, color='g', alpha=0.7)
plt.title("The number of units sold for different product categories")
plt.xlabel("Months")
plt.ylabel("Number of Purchases")
plt.bar(months, purchases, color='g', alpha=0.7)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

"""## 6. Heatmap
Create a heatmap using Seaborn to visualize correlations between different variables in a dataset.
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


np.random.seed(42)
data = {
'Sale': np.random.randint(3000, 6000, 10),
'Demand': np.random.randint(300, 2000, 10),
'Customer': np.random.uniform(1, 5, 10),
'Purchase': np.random.randint(1000, 10000, 10),
'Delivery': np.random.uniform(0.01, 0.2, 10)
}
# Create DataFrame
df = pd.DataFrame(data)
# Creating the correlation matrix
corr_matrix = df.corr()
# Plot heatmap
plt.figure(figsize=(8,6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5, cbar=True)
plt.title("Correlation Heatmap")
plt.show()

"""## 7. Box Plot
Generate a box plot to compare the salary distributions of employees in different departments.
"""

# Sample Data
import pandas as pd

data = {'Department': ['HR', 'IT', 'Sales', 'Marketing', 'HR', 'IT', 'Sales', 'Marketing'],
        'Salary': [50000, 70000, 45000, 60000, 52000, 71000, 47000, 62000]}
df = pd.DataFrame(data)

# Use Seaborn to create the box plot.

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# Sample Data
data = {'Department': ['HR', 'IT', 'Sales', 'Marketing', 'HR', 'IT', 'Sales', 'Marketing'],
'Salary': [50000, 70000, 45000, 60000, 52000, 71000, 47000, 62000]}
df = pd.DataFrame(data)
# Plot Box Plot
plt.figure(figsize=(8,4))
sns.boxplot(x='Department', y='Salary', data=df, palette='Set1')
# Title and Labels
plt.title('Salary Distribution by Departments')
plt.xlabel('Department')
plt.ylabel('Salary (PLN)')
plt.grid(axis='y', linestyle='--', alpha=0.7)
# Show plot
plt.show()

"""## 8. Pie Chart
Create a pie chart to show the proportion of different customer types in a business.
"""

import matplotlib.pyplot as plt

customer_types = ['wholesale Customers', 'Retail Customers', 'Regular Customers', 'Irregular Customers']
proportions = [100, 60, 40, 15]

plt.figure(figsize=(5,5))
plt.pie(proportions, labels=customer_types, autopct='%1.1f%%', colors=['purple', 'green',
'gold', 'pink'],startangle=140, explode=(0.2, 0, 0, 0))
 # explode the first slice for emphasis

plt.title('Customer Types Proportion')

plt.show()

"""## 9. Interactive Bar Chart (Plotly)
Use Plotly to create an interactive bar chart for the number of sales per region.
"""

# Sample Data
import pandas as pd

regions = ['North', 'South', 'East', 'West']
sales = [150, 200, 180, 220]

df = pd.DataFrame({'Region': regions, 'Sales': sales})

# Use Plotly to create an interactive bar chart.

import pandas as pd
import plotly.express as px

regions = ['North', 'South', 'East', 'West']
sales = [150, 200, 180, 220]
df = pd.DataFrame({'Region': regions, 'Sales': sales})
# Create an interactive bar chart using Plotly
fig = px.bar(df, x='Region', y='Sales',
title="Sales per Region",
labels={'Sales': 'Number of Sales', 'Region': 'Sales Region'},
color='Region',

color_discrete_map={'North': 'pink', 'South': 'blue', 'East': 'yellow', 'West': 'purple'})
plt.figure(figsize=(4,2))

fig.show()

"""## 10. Time-Series Data
Generate a time-series line plot showing daily temperature changes over a month.
"""

import yfinance as yf
import matplotlib.pyplot as plt


# Define the stock symbol and time period
stock_symbol = "AAPL"  # Example: Apple Inc.
start_date = "2025-01-01"
end_date = "2023-12-01"


# Fetch stock data from Yahoo Finance
data = yf.download(stock_symbol, start=start_date, end=end_date)


# Check the data structure
print(data.head())


# Plot the time series for the stock's closing prices
plt.figure(figsize=(12, 7))
plt.plot(data.index, data['Close'], label=f'{stock_symbol} Closing Price', color='blue')
plt.title(f"{stock_symbol} Stock Prices Over Time")
plt.xlabel("Date")
plt.ylabel("Price (USD)")
plt.legend()
plt.grid()
plt.show()

"""## 11. Choropleth Map (Geographical Visualization)
Create a choropleth map showing average income levels per country.
"""

# Sample Data
import pandas as pd

data = {'Country': ['USA', 'Canada', 'Germany', 'France', 'India'],
        'Income': [55000, 48000, 50000, 47000, 15000]}
df = pd.DataFrame(data)

# Use Plotly to create a choropleth map.

import pandas as pd
import plotly.express as px

# Sample Data
data = {'Country': ['USA', 'Canada', 'Germany', 'France', 'India'],
        'Income': [55000, 48000, 50000, 47000, 15000]}
df = pd.DataFrame(data)

# Plotly Choropleth Map
fig = px.choropleth(
    df,
    locations="Country",
    locationmode="country names",
    color="Income",
    color_continuous_scale="Viridis",
    title="Average Income Levels per Country",
)

fig.show()

"""## 12. Violin Plot
Plot a violin plot to analyze the distribution of student test scores across different schools.

## 13. Create a bar chart using Matplotlib to show total sales for different product categories.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Sample Data
data = {
    'Category': ['Electronics', 'Clothing', 'Home & Kitchen', 'Beauty', 'Sports'],
    'Sales': [50000, 35000, 42000, 28000, 32000]
}

# Create DataFrame
df = pd.DataFrame(data)

# Bar Chart: Total Sales by Category
plt.figure(figsize=(8, 5))
plt.bar(df['Category'], df['Sales'], color='skyblue')

# Add labels and title (Complete this part)
plt.xlabel("Category")  # <-- Fill in the missing label
plt.ylabel("Sales")  # <-- Fill in the missing label
plt.title("Total sales for different product categories")  # <-- Fill in the missing title

# Show plot
plt.show()

"""## 14. Dashboard-like Figure
Combine multiple visualizations (bar chart, scatter plot, pie chart) into a single figure using subplots.
"""

# Sample Data
import pandas as pd

data = {'Category': ['A', 'B', 'C', 'D'], 'Values': [10, 20, 30, 40]}
df = pd.DataFrame(data)

# Use Matplotlib to create multiple subplots in a dashboard-like figure.

"""## 15. Pandas DataFrame Exercise
Example: Create a DataFrame using the zip() function.
"""

import pandas as pd

# List1: Names of students
Students = ['Alice', 'Bob', 'Charlie', 'David']

# List2: Corresponding ages
Ages = [21, 23, 22, 20]

# Use zip() to combine the two lists into a list of tuples
student_data = list(zip(Students, Ages)) # <-- Complete this line using zip()

# Convert the list of tuples into a Pandas DataFrame
df = pd.DataFrame(student_data, columns=['Student', 'Age'])

# Print the DataFrame
print(df)  # <-- Complete this line to print the DataFrame

"""## 16. Access and Filter Data from a DataFrame
You have been given a dataset containing information about employees, including their Name, Age, Gender, and Salary. Using Pandas, perform the following tasks:

1. Create a DataFrame using the provided dictionary structure.
2. Display the entire DataFrame.
3. Access the "Salary" column and print it.
4. Select the third row (index 2) and print it.
5. Retrieve only the "Name" and "Salary" columns for the first three rows.
6. Filter and print employees who earn more than $50,000.
"""

import pandas as pd

# Provided Data
data = {
    'Name': ['John', 'Alice', 'Bob', 'Eve', 'Charlie'],
    'Age': [25, 30, 22, 35, 28],
    'Gender': ['Male', 'Female', 'Male', 'Female', 'Male'],
    'Salary': [50000, 55000, 40000, 70000, 48000]
}

# 1. Create a DataFrame from the dictionary
df = pd.DataFrame(data) # <-- Complete this line

# 2. Display the entire DataFrame
print(df)  # <-- Complete this line

# 3. Access and print the "Salary" column
salary_column = df['Salary']
print(salary_column)

# 4. Select and print the third row (index 2)
third_row = df.iloc[2]
print(third_row)

# 5. Retrieve and print only the "Name" and "Salary" columns for the first three rows
subset = df.loc[:2, ['Name', 'Salary']]
print(subset)

# 6. Filter and print employees who earn more than $50,000
filtered_data = df[df['Salary'] > 50000]
print(filtered_data)